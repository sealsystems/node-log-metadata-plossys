name: Test

on:
  push:
    branches:
      - "**"
      - "!master"
      - "![0-9]+.[0-9]+.x"

env:
  LOG_LEVELS: fatal
  TLS_UNPROTECTED: world

jobs:
  Cancel-Old-Runs:
    runs-on: ubuntu-latest

    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}

  Test-Linux:
    runs-on: ubuntu-18.04

    services:
      mongo:
        image: plossys/mongodb-rs:3.6.17
        ports:
          - 27017:27017
      consul:
        image: consul:1.7.4
        ports:
          - 8500:8500

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 12.19.0
        uses: actions/setup-node@v1
        with:
          node-version: 12.19.0
          registry-url: https://npm.pkg.github.com/
          scope: "@sealsystems"

      - name: Cache Node.js modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}-12.19.0-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm i
        env:
          # Use personal access token, must be set for *each step*
          NODE_AUTH_TOKEN: ${{secrets.CI_TOKEN}}

      - name: Run tests
        run: npm run bot
        env:
          # Use personal access token, must be set for *each step*
          NODE_AUTH_TOKEN: ${{secrets.CI_TOKEN}}

  # Test-Windows:
  #   runs-on: windows-2019

  #   defaults:
  #     run:
  #       # Set Shell to default Powershell, not pwsh
  #       shell: powershell -Command "& '{0}'"

  #   steps:
  #     - name: Set git to use LF
  #       run: |
  #         git config --global core.autocrlf false
  #         git config --global core.eol lf

  #     - uses: actions/checkout@v2

  #     - name: Use Node.js 12.19.0
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 12.19.0
  #         registry-url: https://npm.pkg.github.com/
  #         scope: "@sealsystems"

  #     - name: Install MongoDB 3.6.17
  #       run: |
  #         Write-Host "Stopping existing MongoDB service..."
  #         Stop-Service mongodb -force

  #         Write-Host "Downloading https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-3.6.17.zip ..."
  #         (New-Object Net.WebClient).DownloadFile(
  #           "https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-3.6.17.zip",
  #           "C:\mongodb-win32-x86_64-2008plus-ssl-3.6.17.zip"
  #         )

  #         Write-Host "Extracting zip archive to C:\mongodb ..."
  #         Expand-Archive "C:\mongodb-win32-x86_64-2008plus-ssl-3.6.17.zip" -DestinationPath "C:\"
  #         Rename-Item "C:\mongodb-win32-x86_64-2008plus-ssl-3.6.17" "C:\mongodb"

  #         Write-Host "Creating necessary folders in C:\mongodb ..."
  #         mkdir c:\mongodb\data\db | Out-Null
  #         mkdir c:\mongodb\log | Out-Null

  #         Write-Host "Writing MongoDB configuration..."
  #         "systemLog:
  #           destination: file
  #           path: c:\mongodb\log\mongod.log
  #         storage:
  #           dbPath: c:\mongodb\data\db
  #         replication:
  #           replSetName: rs0
  #         " | Out-File C:\mongodb\mongod.cfg -Encoding utf8

  #         Write-Host "Creating seal-mongodb service..."
  #         cmd /c start /wait sc create seal-mongodb binPath= "C:\mongodb\bin\mongod.exe --service --config=C:\mongodb\mongod.cfg" DisplayName= "seal-mongodb" start= "demand"

  #         Write-Host "Starting seal-mongodb service..."
  #         Start-Service seal-mongodb

  #         Write-Host "Initiate MonogDB replicaSet..."
  #         C:\mongodb\bin\mongo.exe --eval 'rs.initiate()'

  #     - name: Install Consul 1.7.4
  #       run: |
  #         Write-Host "Creating necessary folders in C:\consul ..."
  #         mkdir c:\consul\data | Out-Null

  #         Write-Host "Downloading https://releases.hashicorp.com/consul/1.7.4/consul_1.7.4_windows_amd64.zip ..."
  #         (New-Object Net.WebClient).DownloadFile(
  #           "https://releases.hashicorp.com/consul/1.7.4/consul_1.7.4_windows_amd64.zip",
  #           "C:\consul\consul_1.7.4_windows_amd64.zip"
  #         )

  #         Write-Host "Extracting zip archive to C:\consul ..."
  #         Expand-Archive "C:\consul\consul_1.7.4_windows_amd64.zip" -DestinationPath "C:\consul"

  #         Write-Host "Writing Consul configuration..."
  #         @{
  #           bind_addr="127.0.0.1"
  #           data_dir="C:\consul\data"
  #           bootstrap_expect=1
  #           ports=@{
  #             dns=53
  #             http=8500
  #           }
  #           server=$True
  #         } | ConvertTo-Json | Out-File -Filepath "C:\consul\config.json" -Encoding ascii

  #         Write-Host "Starting Consul service..."
  #         cmd /c start /wait sc create Consul binPath= "C:\consul\consul.exe agent -config-file=C:\consul\config.json" DisplayName= "Consul" start= "demand"
  #         Start-Service Consul

  #     - name: Install dependencies
  #       run: npm i
  #       env:
  #         # Use personal access token, must be set for *each step*
  #         NODE_AUTH_TOKEN: ${{secrets.CI_TOKEN}}

  #     - name: Run tests
  #       run: npm run bot
  #       env:
  #         # Use personal access token, must be set for *each step*
  #         NODE_AUTH_TOKEN: ${{secrets.CI_TOKEN}}
      #
      # # Debug with RDP
      # - name: Download Ngrok
      #   run: Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
      # - name: Extract Ngrok
      #   run: Expand-Archive ngrok.zip
      # - name: Auth Ngrok
      #   run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      #   env:
      #     NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      # - name: Enable TS
      #   run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
      # - run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
      # - run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
      # - run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Password123!" -Force)
      # - name: Create Ngrok Tunnel
      #   run: .\ngrok\ngrok.exe tcp 3389
